{
	"info": {
		"_postman_id": "b9e522aa-7051-47cf-8d9a-1330b71da047",
		"name": "STSTStudentCourse",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4496516"
	},
	"item": [
		{
			"name": "Get All Todo Entries",
			"item": [
				{
					"name": "Get All Todo Entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an object with required fields\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('apiVersion', 'title', 'paymentCurrency', 'categories', 'scopes', 'apps', 'links');",
									"});",
									"",
									"pm.test(\"PaymentCurrency is a non-empty string\", function () {",
									"    pm.expect(pm.response.json().paymentCurrency).to.be.a('string').and.to.have.lengthOf.at.least(1, \"PaymentCurrency should not be empty\");",
									"});",
									"",
									"pm.test(\"Apps object contains developer, fusio, and redoc\", function () {",
									"    pm.expect(pm.response.json().apps).to.include.all.keys('developer', 'fusio', 'redoc');",
									"});",
									"",
									"pm.test(\"Links array contains rel and href properties\", function () {",
									"    pm.response.json().links.forEach(function(link) {",
									"        pm.expect(link).to.have.property('rel');",
									"        pm.expect(link).to.have.property('href');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{entry_url}}/index.php",
							"host": [
								"{{entry_url}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get All Entries",
			"item": [
				{
					"name": "Get All Entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Categories array should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.categories).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Categories array should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Scopes array is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.scopes).to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"",
									"pm.test(\"Apps object contains developer, fusio, and redoc properties\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.apps).to.be.an('object');",
									"    pm.expect(responseData.apps).to.have.property('developer');",
									"    pm.expect(responseData.apps).to.have.property('fusio');",
									"    pm.expect(responseData.apps).to.have.property('redoc');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{entry_url}}/index.php/",
							"host": [
								"{{entry_url}}"
							],
							"path": [
								"index.php",
								""
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "https://demo.fusio-project.org/index.php/"
					},
					"response": []
				}
			]
		},
		{
			"name": "Get entry per ID",
			"item": [
				{
					"name": "Get entry per ID - Valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Categories array is present and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.categories).to.exist.and.to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"",
									"pm.test(\"Scopes array is present and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.scopes).to.exist.and.to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"",
									"pm.test(\"Apps object is present and contains expected keys\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.apps).to.exist;",
									"    pm.expect(responseData.apps).to.have.property('developer');",
									"    pm.expect(responseData.apps).to.have.property('fusio');",
									"    pm.expect(responseData.apps).to.have.property('redoc');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{entry_url}}/index.php",
							"host": [
								"{{entry_url}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "https://demo.fusio-project.org/index.php/todo/:todo_id"
					},
					"response": []
				},
				{
					"name": "Get entry per ID - Invalid ID(params not using TODO ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.include.all.keys('apiVersion', 'title', 'paymentCurrency', 'categories', 'scopes', 'apps', 'links');",
									"});",
									"",
									"",
									"pm.test(\"Categories and scopes are non-empty arrays\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.categories).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Categories should not be empty\");",
									"  pm.expect(responseData.scopes).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Scopes should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Apps object contains developer, fusio, and redoc properties\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.apps).to.be.an('object');",
									"  pm.expect(responseData.apps).to.have.property('developer');",
									"  pm.expect(responseData.apps).to.have.property('fusio');",
									"  pm.expect(responseData.apps).to.have.property('redoc');",
									"});",
									"",
									"",
									"pm.test(\"Links array contains rel and href properties for each link\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.links).to.be.an('array');",
									"  responseData.links.forEach(function(link) {",
									"    pm.expect(link).to.have.property('rel');",
									"    pm.expect(link).to.have.property('href');",
									"  });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{entry_url}}/",
							"host": [
								"{{entry_url}}"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "https://demo.fusio-project.org/index.php/todo/:todo_id"
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Books",
			"item": [
				{
					"name": "Get All Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Each book object has an id, name, type, and availability\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(book) {",
									"        pm.expect(book).to.be.an('object');",
									"        pm.expect(book.id).to.exist;",
									"        pm.expect(book.name).to.exist;",
									"        pm.expect(book.type).to.exist;",
									"        pm.expect(book.available).to.exist;",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Available field is a boolean value\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(book) {",
									"        pm.expect(book.available).to.be.a('boolean');",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{books_url}}/books",
							"host": [
								"{{books_url}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Books by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Price is a positive number\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.price).to.be.a('number').above(0);",
									"});",
									"",
									"",
									"pm.test(\"Available field is a boolean value\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.available).to.be.a('boolean');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{books_url}}/books/:bookId",
							"host": [
								"{{books_url}}"
							],
							"path": [
								"books",
								":bookId"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "bookId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Books by Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, name, type, and available\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(book) {",
									"        pm.expect(book).to.include.all.keys('id', 'name', 'type', 'available');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(book) {",
									"    pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Type is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(book) {",
									"        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Available is a boolean value\", function () {",
									"    const responseData = pm.response.json();",
									"    responseData.forEach(function(book) {",
									"        pm.expect(book.available).to.be.a('boolean');",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{books_url}}/books?type=fiction",
							"host": [
								"{{books_url}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "fiction"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Place a book order",
			"item": [
				{
					"name": "Place a book order - using book ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const prefix = new Date().getTime()",
									"",
									"const email = prefix+'@yopmail.com'",
									"pm.variables.set('clientEmail', email)",
									"",
									"const bodyRequest = {",
									"    url: 'https://simple-books-api.glitch.me/api-clients/',",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body:{",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            clientName: 'Tester',",
									"            clientEmail: pm.variables.get('clientEmail')",
									"        })",
									"    }",
									"}",
									"",
									"pm.sendRequest(bodyRequest,(error, response) => { ",
									"    const res = response.json()",
									"    access = res.accessToken",
									"    pm.collectionVariables.set('books_token', access)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - created and orderId\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.created).to.exist;",
									"    pm.expect(responseData.orderId).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"OrderId should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.orderId).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Created field is a boolean value\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.created).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{books_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bookId\": 1,\n    \"customerName\": \"QI-Crafted Ltd\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{books_url}}/orders",
							"host": [
								"{{books_url}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get an order",
			"item": [
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(order) {",
									"        pm.expect(order).to.have.property('id');",
									"        pm.expect(order).to.have.property('bookId');",
									"        pm.expect(order).to.have.property('customerName');",
									"        pm.expect(order).to.have.property('createdBy');",
									"        pm.expect(order).to.have.property('quantity');",
									"        pm.expect(order).to.have.property('timestamp');",
									"    });",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response is an array with at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"var data = pm.response.json()",
									"var id = data[0].id",
									"console.log(id)",
									"pm.collectionVariables.set(\"order_id\", id)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{books_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{books_url}}/orders",
							"host": [
								"{{books_url}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an order - using orderID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('bookId');",
									"    pm.expect(responseData).to.have.property('customerName');",
									"    pm.expect(responseData).to.have.property('createdBy');",
									"    pm.expect(responseData).to.have.property('quantity');",
									"    pm.expect(responseData).to.have.property('timestamp');",
									"});",
									"",
									"",
									"pm.test(\"BookId is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.bookId).to.be.a('number');",
									"    pm.expect(responseData.bookId).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"CustomerName is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.customerName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"CustomerName should not be empty\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{books_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{books_url}}/orders/:orderId",
							"host": [
								"{{books_url}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{order_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update an order",
			"item": [
				{
					"name": "Update an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - created and orderId\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.created).to.exist;",
									"    pm.expect(responseData.orderId).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"OrderId is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.orderId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"OrderId should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Verify Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Created field is a boolean value\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.created).to.be.a('boolean');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{books_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bookId\": 1,\n    \"customerName\": \"QI-Academy\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{books_url}}/orders/",
							"host": [
								"{{books_url}}"
							],
							"path": [
								"orders",
								""
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete an order",
			"item": [
				{
					"name": "Delete an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 204\", function () {",
									"    pm.expect(pm.response.code).to.equal(204);",
									"});",
									"",
									"pm.test(\"Response body is null\", function () {",
									"    const responseData = xml2Json(pm.response.text());",
									"    ",
									"    pm.expect(responseData).to.be.null;",
									"});",
									"",
									"",
									"pm.test(\"Verify that the orderId is removed from the database\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Response body is empty\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{books_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{books_url}}/orders/:orderId",
							"host": [
								"{{books_url}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{order_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Register API Client",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - accessToken\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData.accessToken).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Access token should not be empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.accessToken).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Access token is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.accessToken).to.be.a('string').and.to.match(/[A-Za-z0-9]{20}/);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const prefix = new Date().getTime()",
							"",
							"const email = prefix+'@yopmail.com'",
							"pm.variables.set('clientEmail', email)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessTokenUrl",
							"value": "https://demo.fusio-project.org/",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Authority",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "client_credentials",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"clientName\": \"Ibironke\",\n   \"clientEmail\": \"{{clientEmail}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{books_url}}/api-clients/",
					"host": [
						"{{books_url}}"
					],
					"path": [
						"api-clients",
						""
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get API Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Status is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Status field is present in the response\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData).to.have.property('status');",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{books_url}}/status",
					"host": [
						"{{books_url}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "entry_url",
			"value": "https://demo.fusio-project.org"
		},
		{
			"key": "books_url",
			"value": "https://simple-books-api.glitch.me"
		},
		{
			"key": "books_token",
			"value": ""
		},
		{
			"key": "order_id",
			"value": ""
		}
	]
}